@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="he">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ניהול מערכת</title>
    <link rel="stylesheet" href="~/CSS/AdminPage.css">
    <style>
        .table-container {
            margin: 20px;
            overflow-x: auto;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
            background: linear-gradient(to right, #8e1899, #49124e);
            padding: 15px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            text-align: left;
            background-color: #fff;
            border-radius: 10px;
            overflow: hidden;
        }

        thead {
            background-color: #49124e;
            color: white;
            text-transform: uppercase;
            font-size: 14px;
        }

        th, td {
            padding: 15px;
            border-bottom: 1px solid #ddd;
        }

        button {
            padding: 10px 15px;
            font-size: 12px;
            background-color: #49124e;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-transform: uppercase;
        }

            button:hover {
                background-color: #6b1a74;
                transition: background-color 0.3s ease;
            }
    </style>
</head>
<body>
    <h1 style="text-align: center; color: #49124e;">מערכת ניהול</h1>

    <!-- טבלת ספרים -->
    <div class="table-container">
        <h2>רשימת ספרים</h2>
        <button onclick="addBook()">הוסף ספר חדש</button>
        <table>
            <thead>
                <tr>
                    <th>שם הספר</th>
                    <th>קטגוריה</th>
                    <th>שפה</th>
                    <th>הוצאה</th>
                    <th>תאריך פרסום</th>
                    <th>קישור</th>
                    <th>מחיר</th>
                    <th>תמונה</th>
                    <th>פעולות</th>
                </tr>
            </thead>
            <tbody id="booksTable"></tbody>
        </table>
    </div>

    <!-- טבלת משתמשים -->
    <div class="table-container">
        <h2>רשימת משתמשים</h2>
        <button onclick="addUser()">הוסף משתמש חדש</button>
        <table>
            <thead>
                <tr>
                    <th>שם</th>
                    <th>אימייל</th>
                    <th>סוג</th>
                    <th>פעולות</th>
                </tr>
            </thead>
            <tbody id="usersTable"></tbody>
        </table>
    </div>

    <!-- טבלת רשימת המתנה -->
    <div class="table-container">
        <h2>רשימת המתנה</h2>
        <button onclick="addToWaitingList()">הוסף לרשימת המתנה</button>
        <table>
            <thead>
                <tr>
                    <th>שם</th>
                    <th>שם הספר</th>
                    <th>תאריך</th>
                    <th>אימייל</th>
                    <th>פעולות</th>
                </tr>
            </thead>
            <tbody id="waitingListTable"></tbody>
        </table>
    </div>
    <section id="site-reviews">
        <h2>Site Reviews</h2>
        <table>
            <thead>
                <tr>
                    <th>Review ID</th>
                    <th>Content</th>
                    <th>Email</th>
                    <th>Created At</th>
                </tr>
            </thead>
            <tbody id="reviews-table-body">
                <!-- שורות מתעדכנות באופן דינמי -->
            </tbody>
        </table>
    </section>

    <script>
        // שליפת הביקורות והצגתן בטבלה
        fetch('/Admin/GetSiteReviews')
            .then(response => response.json())
            .then(data => {
                const tableBody = document.getElementById('reviews-table-body');
                data.forEach(review => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${review.ID_review}</td>
                        <td>${review.Content}</td>
                        <td>${review.email}</td>
                        <td>${new Date(review.CreatedAt).toLocaleDateString()}</td>
                    `;
                    tableBody.appendChild(row);
                });
            })
            .catch(error => console.error('Error fetching site reviews:', error));
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            loadBooks();
            loadUsers();
            loadWaitingList();
        });

        // פונקציות טעינת נתונים
        async function loadBooks() {
            const response = await fetch('/Admin/GetBooksList');
            const books = await response.json();
            const booksTable = document.getElementById('booksTable');
            booksTable.innerHTML = '';
            books.forEach(book => {
                booksTable.innerHTML += `
                <tr>
                    <td>${book.book_name}</td>
                    <td>${book.category}</td>
                    <td>${book.language}</td>
                    <td>${book.publisher}</td>
                    <td>${book.Publication_date}</td>
                    <td><a href="${book.link}" target="_blank">צפה</a></td>
                    <td>${book.price}</td>
                    <td><img src="${book.ImageUrl}" alt="תמונה" width="50"></td>
                    <td>
                        <button onclick="editBook(${book.book_id})">ערוך</button>
                        <button onclick="deleteBook(${book.book_id})">מחק</button>
                        <button onclick="editBookPrice(${book.book_id})">ערוך מחיר ספר</button>

                    </td>
                </tr>`
            });
        }


        async function loadUsers() {
            try {
                const response = await fetch('/Admin/GetUsersList');
                const users = await response.json();
                const usersTable = document.getElementById('usersTable');

                usersTable.innerHTML = ''; // ריקון הטבלה לפני הטעינה
                users.forEach(user => {
                    usersTable.innerHTML += `
                    <tr>
                        <td>${user.name}</td>
                        <td>${user.email}</td>
                        <td>${user.type}</td>
                        <td>
                            <button onclick="deleteUser('${user.email}')">מחק</button>
                        </td>
                    </tr>`;
                });
            } catch (error) {
                console.error("Error loading users:", error);
            }
        }


        async function loadWaitingList() {
            const response = await fetch('/Admin/GetWaitingList');
            const waitingList = await response.json();
            const waitingListTable = document.getElementById('waitingListTable');
            waitingListTable.innerHTML = '';
            waitingList.forEach(entry => {
                waitingListTable.innerHTML += `
                <tr>
                    <td>${entry.name}</td>
                    <td>${entry.book_name}</td>
                    <td>${entry.date.split('T')[0]}</td>
                    <td>${entry.email}</td>
                    <td>
                        <button onclick="deleteUser('${user.email}')">מחק</button>
                    </td>
                </tr>`;
            });
        }


        // פונקציות לניהול
        async function addBook() {
            // Fetch all books to determine the last book_id
            const booksResponse = await fetch('/Admin/GetBooks');
            const books = await booksResponse.json();

            // Calculate the next book_id
            const lastBook = books.length > 0 ? books[books.length - 1] : null;
            const nextBookId = lastBook ? lastBook.book_id + 1 : 1;

            const book_name = prompt("הכנס שם ספר:");
            const category = prompt("הכנס קטגוריה:");
            const language = prompt("הכנס שפה:");
            const publisher = prompt("הכנס שם הוצאה:");
            const publication_date = prompt("הכנס תאריך פרסום (YYYY-MM-DD):");
            const link = prompt("הכנס קישור לספר:");
            const price = parseFloat(prompt("הכנס מחיר:"));
            const ImageUrl = prompt("הכנס כתובת URL לתמונה:");
            const author = prompt("הכנס שם מחבר:");
            const MaxRentCount = parseInt(prompt("הכנס כמות השכרות מקסימלית:"));

            const book = {
                book_id: nextBookId,
                book_name,
                category,
                language,
                publisher,
                publication_date,
                link,
                price,
                ImageUrl,
                author,
                MaxRentCount,
                CurrentRentCount: 0,
                IsSold: true,
                IsRent: true
            };

            const response = await fetch('/Admin/AddBook', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(book),
            });

            const result = await response.json();
            alert(result.message);

            if (result.success) {
                loadBooks(); // Refresh the book list
            }
        }

        async function addUser() {
            const name = prompt("הכנס שם משתמש:");
            const email = prompt("הכנס אימייל:");
            const password = prompt("הכנס סיסמה:");
            const type = prompt("הכנס סוג משתמש (Admin/User):");

            const user = { name, email, password, type };

            const response = await fetch('/Admin/AddUser', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(user),
            });

            const result = await response.json();
            alert(result.message);

            if (result.success) {
                loadUsers(); // Refresh the user list
            }
        }

        async function addToWaitingList() {
            const name = prompt("הכנס שם:");
            const book_name = prompt("הכנס שם ספר:");
            const date = prompt("הכנס תאריך (YYYY-MM-DD):");
            const email = prompt("הכנס אימייל:");

            const waitingEntry = { name, book_name, date, email };

            const response = await fetch('/Admin/AddToWaitingList', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(waitingEntry),
            });

            const result = await response.json();
            alert(result.message);

            if (result.success) {
                loadWaitingList(); // רענון רשימת ההמתנה
            }
        }
        async function editBookPrice() {
            const bookId = parseInt(prompt("הכנס את מזהה הספר (ID):"));
            const newPrice = parseFloat(prompt("הכנס את המחיר החדש:"));

            if (isNaN(bookId) || isNaN(newPrice)) {
                alert("אנא הזן ערכים חוקיים.");
                return;
            }

            const response = await fetch('/Admin/EditBookPrice', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ book_id: bookId, newPrice: newPrice }),
            });

            const result = await response.json();
            alert(result.message);

            if (result.success) {
                loadBooks(); // רענון רשימת הספרים
            }
        }
        async function deleteUser(email) {
            if (confirm("האם אתה בטוח שברצונך למחוק את המשתמש?")) {
                try {
                    const formData = new FormData();
                    formData.append("email", email);

                    const response = await fetch('/Admin/DeleteUser', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        alert(result.message);
                        loadUsers();  // טען מחדש את המשתמשים
                    } else {
                        alert(result.message);
                    }
                } catch (error) {
                    console.error("שגיאה במחיקת המשתמש:", error);
                }
            }
        }

    </script>
</body>
</html>